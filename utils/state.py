from typing import List, TypedDict, Annotated, Union
from langchain_core.messages import AnyMessage
from langgraph.graph.message import add_messages

class AgentState(TypedDict):
    """
    Custom Graph state, used to share data between nodes
    
    Attributes:
        messages (Annotated[List[AnyMessage], add_messages]): list of messages generated by nodes
        question (str): the current question used for the retrieval phase
        context (str): the context obtained from the retrieved chunks
        chunks (Union[List[str], None]): a list containing the retrieved chunks
        original_question (str): the user's query integrated with the chat history context
        reranking_score (Union[List[float], None]): a list with the same len of chunks, each position represent the reranking score for the respective chunk
        history (str): the current chat history, used to generate a contextualized user's query

    """
    messages: Annotated[List[AnyMessage], add_messages]
    question: str
    context: str
    chunks: Union[List[str], None]
    original_question: str
    reranking_score: Union[List[float], None]
    history: str

    @classmethod
    def create(cls, messages=[], question="", history=""):
        """
        A class method used to generate a AgentState with some default values

        Parameters:
            messages (List[AnyMessage]): a list containing the initial graph messages
            question (str): the user's query/question
            history (str): the current chat history (exchange of question-answer between the user and the system)

        Returns:
            AgentState: An AgentState instance with some default values 
        """
        return AgentState(
            messages=messages, 
            question=question,
            context="",
            chunks=None,
            original_question=question,
            reranking_score=None,
            history=history
        )